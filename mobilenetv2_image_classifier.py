# -*- coding: utf-8 -*-
"""mobilenetv2_image_classifier.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Sgup5v2_uKsR-N1SEE4lNPT9shOubP8g
"""

# Mount Google Drive to access local files
from google.colab import drive
drive.mount('/content/drive')
#--------------------------------------------------------------------------------------------

# Import required libraries
import tensorflow as tf
from tensorflow.keras import applications
import PIL
import numpy as np
#--------------------------------------------------------------------------------------------

# Define input shape for the MobileNetV2 model
input_shape = (224, 224)
#--------------------------------------------------------------------------------------------

# Load and preprocess an image from a given path
# - Resizes the image
# - Converts it to a NumPy array
# - Normalizes pixel values to [0, 1]
def load_image(path):
  img=PIL.Image.open(path).resize(input_shape)
  img=np.array(img)/255.0
  return img
#--------------------------------------------------------------------------------------------

# Load a pretrained MobileNetV2 model with the full classification layer
# Weights are loaded from ImageNet
def load_net():
  model=applications.MobileNetV2(input_shape=IMG_SIZE,
                                       include_top=True,
                                       weights='imagenet')
  return model
#--------------------------------------------------------------------------------------------

# Perform prediction on a preprocessed image using the model
# Prints top 3 predicted ImageNet class labels and confidence scores
def prediction(model,img):
  result=model.predict(img[np.newaxis,...])
  predicted_label_index=np.argmax(result)
  print('index of the predicted class in imagenet classes:',predicted_label_index)
  # Decode top 3 predictions using ImageNet labels
  decoded = applications.mobilenet.decode_predictions(result, top=3)[0]
  for i, (imagenet_id, label, confidence) in enumerate(decoded):
    print(f"{i+1}. {label}: {confidence:.2f}")
#--------------------------------------------------------------------------------------------

# Set image path (image should be stored in your Google Drive)
path='path/pic.webp'

# Load image and model, then run prediction
test_image=load_image(path)
net=load_net();
prediction(net,test_image)
